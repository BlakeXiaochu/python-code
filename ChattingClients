from socket import *
import threading
from time import ctime, sleep

def connection_info(clients):
	connection_data = clients.recv(BUFSIZ)							#显示连接信息
	print(connection_data.decode('UTF-8'))
	connection_data = clients.recv(BUFSIZ)
	print(connection_data.decode('UTF-8'))
	print(' ')

#聊天接受信息线程类
class recvms_Thread(threading.Thread):
	def __init__(self, clients, BUFSIZ = 1024, name = 'recv_message', daemon = True):
		threading.Thread.__init__(self)
		self.clients = clients
		self.BUFSIZ = BUFSIZ
		self.name = name
		self.daemon = daemon

	def chatting_recv(self):
		try:
			while True:
				data = self.clients.recv(BUFSIZ)
				print(data.decode('UTF-8'))
				data = self.clients.recv(BUFSIZ)
				print(data.decode('UTF-8'))
				print(' ')
		except ConnectionAbortedError as e:								#客户端输入exit，捕获当前主机断开连接错误
			pass
		except ConnectionResetError as e:								#捕获服务器断开连接错误
			print(' ')
			print('与服务器连接断开...')
			self.clients.close()
			exit(0)

	def run(self):
		self.chatting_recv()


#聊天发送信息线程类
class sendms_Thread(threading.Thread):
	def __init__(self, clients,  name = 'send_message', daemon = True):
		threading.Thread.__init__(self)
		self.clients = clients
		self.name = name
		self.daemon = daemon

	def chatting_send(self):
		while True:
			data = input()
			self.clients.send( ('[%s]:' % ctime()).encode('UTF-8') ) 
			self.clients.send(data.encode('UTF-8'))
			print(' ')
			if data == 'exit' or data == '退出聊天':					#输入exit，退出程序
				print('Servers Shut Down...')
				self.clients.close()
				exit(0)

	def run(self):
		self.chatting_send()


#聊天线程启动类
class Chatting_Thread(object):
	def __init__(self, clients, BUFSIZ = 1024):
		self.clients = clients
		self.BUFSIZ = BUFSIZ

	def quit_chatting(self):
		pass

	def start(self):
		Crecv = recvms_Thread(self.clients, self.BUFSIZ)
		Csend = sendms_Thread(self.clients)
		Crecv.start()
		Csend.start()


#设置服务器地址
HOST = '183.172.187.100'
PORT = 9999
ADDR = (HOST, PORT)
BUFSIZ = 1024

clients = socket(AF_INET, SOCK_STREAM)
try:
	clients.connect(ADDR)											#连接服务器
except TimeoutError as e:
	print('与服务器进行连接超时...')
	print(' ')
	print('请稍后重试...')
	exit(0)
except ConnectionRefusedError as e:
	print('与服务器被拒绝...')
	print(' ')
	print('请稍后重试...')
	exit(0)
else:
	connection_info(clients)										#显示连接信息

#创建双方通信线程
Crecv = recvms_Thread(clients, BUFSIZ)
Csend = sendms_Thread(clients)

#聊天
Crecv.start()
Csend.start()

Crecv.join()
Csend.join()	